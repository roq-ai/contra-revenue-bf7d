generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model article {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  content         String
  category        String            @db.VarChar(255)
  organization_id String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  organization    organization      @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  article_keyword article_keyword[]
  history         history[]
}

model article_keyword {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id String   @db.Uuid
  keyword_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  article    article  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  keyword    keyword  @relation(fields: [keyword_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model history {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  article_id String   @db.Uuid
  change_log String
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  article    article  @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model keyword {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word            String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  article_keyword article_keyword[]
}

model organization {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  article     article[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
